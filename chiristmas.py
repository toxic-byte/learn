# 圣诞节快到了，有一棵挂满彩灯的二叉树，需要你来按照图纸装饰。彩灯有5种颜色变化，分别用1-5 表示。1表示 红色， 2表示黄色， 3表示蓝色， 4 表示紫色， 5 表示绿色。 每个节点都一个颜色控制器，每按一下，就会将当前彩灯以及以当前节点为根节点的子树上的所有节点，切换到下一个颜色（ 红 -> 黄 -> 蓝 -> 紫 -> 绿 -> 红 ...） 循环切换。

# 给定二叉树的初始状态 initial 和 目标状态 target, 两者都以层序遍历产出的一维数组表示。数组元素对应对应位置节点的颜色，0表示该节点没有彩灯。

# 请给出从initial状态切换至target状态需要的最少控制器点击次数。

# 注意：
# 控制器按一下，不只影响当前节点，也会影响以当前节点为根节点的子树上所有节点切换到下一个颜色（最终不一定是同一个颜色）。




# 输入描述


# 第一行输入为一个整数n, 代表inital 和 target 数组的大小。
# 第二行输入为n个整数，代表inital数组。
# 第三行输入为n个整数，代表target数组。
# 其他：
# 如果 initial[i] == 0, 则 target[i] 也一定为0。

# 1 <=initial.length <= 106


# 输出描述

# 一个整数，表示最少点击次数

# 示例 1
# 收起 

# 输入
# 复制
# 5
# 1 2 3 0 1
# 2 3 1 0 2
# 输出
# 复制
# 3
# 示例 2
# 收起 

# 输入
# 复制
# 7
# 1 2 3 1 2 3 1
# 3 1 2 3 1 2 1
# 输出
# 复制
# 10